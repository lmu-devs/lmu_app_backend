services:
  db:
    image: postgres:16.4-bookworm
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    container_name: db
    networks:
      - backend
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 5


  api:
    build:
      context: .
      dockerfile: Dockerfile-api
    env_file:
      - .env
    container_name: api
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - backend
      - frontend
    volumes:
      - .:/app
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
    restart: always


  data_fetcher:
    build:
      context: .
      dockerfile: Dockerfile-data_fetcher
    env_file:
      - .env
    container_name: data_fetcher
    networks:
      - frontend
      - backend
    command: python data_fetcher/main.py
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"
      - "80:80"
    networks:
      - frontend
    depends_on:
      - api
    restart: always


volumes:
  postgres_data:

networks:
  backend:
    internal: true
  frontend:
