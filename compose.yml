services:
  db:
    image: postgres:16.4-bookworm
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    hostname: database
    networks:
      - backend
    ports:
      - 5432:5432
    expose:
      - 5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5

  # pgadmin:
  #   container_name: pgadmin_container
  #   image: dpage/pgadmin4
  #   volumes:
  #     - ./pgadmin4:/lib/pgadmin/
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   ports:
  #     - 5050:80
  #   depends_on:
  #     - db


  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    # image: raffisdocker/api:v1.0
    env_file:
      - .env
    container_name: api
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - backend
      - frontend
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
    restart: always


  data_fetcher:
    build:
      context: .
      dockerfile: Dockerfile.data_fetcher
    # image: raffisdocker/data_fetcher:v1.0
    env_file:
      - .env
    container_name: data_fetcher
    networks:
      - frontend
      - backend
    command: python data_fetcher/main.py
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    restart: always

  

volumes:
  postgres_data:

networks:
  backend:
    internal: true
  frontend:
