services:
  db:
    image: postgres:16.4-bookworm
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PGDATABASE: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 5
    networks:
      - backend



  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - db
    networks:
      - frontend
      - backend

  api_v1:
    build:
      context: .
      dockerfile: docker/Dockerfile-api
    environment:
      - API_VERSION=v1
      - PYTHONPATH=/app
    env_file:
      - .env
    container_name: api_v1
    networks:
      - backend
      - frontend
    volumes:
      - .:/app
    ports:
      - "127.0.0.1:8001:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: always


  data_fetcher:
    build:
      context: .
      dockerfile: docker/Dockerfile-data_fetcher
    env_file:
      - .env
    container_name: data_fetcher
    networks:
      - frontend
      - backend
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    restart: always


volumes:
  postgres_data:

networks:
  backend:
    internal: true
  frontend:
